Version 0.1.0 (alpha release)
-----------------------------

For the alpha release, the main classes have been created and the more
important analyses have been implemented.

The following gives a list of enhancements, api changes and bug fixes that were
implemented for this release:

Enhancements
~~~~~~~~~~~~

Implementation of the Material class
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
A class has been implemented to represent any material that can be used when
creating an element for the analysis.

Create ShaftElement, DiskElement and BearingSealElement
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The main classes used to create shaft elements, disk elements and bearings/seals
elements have been implemented.

Add rotor assembly and results
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
A Rotor class has been implemented to represent the rotor. A rotor object
assembles the global matrices and provides methods to run the same analysis on
the rotor. Results implemented are modal analysis, Campbell, frequency response
and unbalance response.

Add static analysis method
^^^^^^^^^^^^^^^^^^^^^^^^^^
A method to calculate the static displacement of a rotor due to
disks' weight has been added.

New rotor save format
^^^^^^^^^^^^^^^^^^^^^
A new format for saving rotors was implemented. It is based on the toml format.

Add convergence analysis
^^^^^^^^^^^^^^^^^^^^^^^^
Add convergence analysis as a method to the class Rotor.

Analytical fluid flow, short bearings
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Add analytical fluid flow routines for short bearings.

Add new diagram to static method
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Add a new plot to the static method - shearing force and changes the name of some
graphs to make it more readable.

Add methods to allow inputs from a table in bearing element
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Two methods were added to bearing element. The first one allows instantiating
a bearing object from a table (excel format). The second one converts from
table to dictionary, that can be saved as a toml file.

Interpolation for static analysis and Bending moment diagram
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
An interpolation method has been added to give a more smooth curve on
plots generated by the static analysis.

Add bokeh plot to ForcedResponse() class
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Implements plotting using bokeh to generate magnitude and
phase plot to ForcedResponse class.

Add bokeh plot to "plot_level1" and "plot_ucs"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Add bokeh plotting as alternative to matplotlib to plot graphs.

Benchmark implementation and some changes in imports
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Add Benchmark folder to ross(__init__) folder.  To run the
benchmarks you only need to:  * run `run_benchmarks.py,` the outputs
will be saved into the version folder of benchmarking, which is placed
inside Snakeviz_inputs folder. To visualize the results we recommend
you to use snakeviz, you can easily install it with pip. * As an
example, to run snakeviz on Convergence benchmarks, you only need to
run(within the directory of saved Benchmarks) `snakeviz
Convergence.prof`.
Those changes are some import optimization and turning static() method
into run_static() method.

Added user guide on how to use ROSS
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
A tutorial has been added to the documentation. This is available as a
jupyter notebook and is also rendered in the :ref:`tutorial`
documentation page.

Jupyter examples
^^^^^^^^^^^^^^^^
Implementation of the following examples, taken from Frisswell:
 * 5.9.1
 * 5.9.2
 * 5.9.4
 * 5.9.5
 * 5.9.6
 * 5.9.9
 * 5.9.10

Adds a binder badge
^^^^^^^^^^^^^^^^^^^
Binder is available to test the library in a cloud virtual environment.


API changes
~~~~~~~~~~~

Add run_modal method
^^^^^^^^^^^^^^^^^^^^
The modal analysis changed from ``.run()`` to ``.run_modal()``.


Change methods' names
^^^^^^^^^^^^^^^^^^^^^
This is mostly to add ``run_`` to some Rotor methods, like:
 * campbell;
 * forced_response;
 * mode_shape;
 * static

Also, change the value to evaluate the slenderness ratio (SR) to 1.6.
Since our convergence analysis have shown good results even for SR < 30,
it was decided to change it to 1.6, which is equivalent to a
length / diameter ratio of 0.5.

Remove show() from convergence and static
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Removes bokeh show() from the convergence and static analysis.
Automatically showing the plots is not expected when running tests or
scripts. With this modification, the figure is returned and the user can
plot that if wanted. As an example:

.. code:: ipython3

    static_analysis = rotor.run_static()
    show(static_analysis)

Bug fixes
~~~~~~~~~

Added interpolate to rotor_assembly.py
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The function interp1d was used but the interpolate function was not
being  imported.

Fix eccentricity ratio function
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The eccentricity ratio function was being calculated wrongly, using the
sommerfeld number instead of the modified one, as it was supposed to
use.

Improving plot_rotor
^^^^^^^^^^^^^^^^^^^^
There was an error that shaft elements were plotting with 2 times their
respective radius.  I enlarged the plot window size and distributed the
axis size so that the rotor is presented with the correct proportions in
relation to its dimensions.    Also, adds the slenderness ratio
parameter (equation: G * A * L ** 2 / E * I ) to each shaft element. It
calculates the ratio using some global distance measures, rather than
basing it upon individual element dimensions. The user is returned an
warning message if it's lower than a certain value, which could affect
the convergence analysis.
